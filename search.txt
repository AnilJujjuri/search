import time
from opcua import Client
from azure.iot.device import IoTHubModuleClient

# OPC UA connection settings
endpoint_url = "opc.tcp://MYTSL02946.lnties.com:53530/OPCUA/SimulationServer"

# Telemetry collection interval in seconds
telemetry_interval = 1

# Namespace and identifier for the desired object
desired_ns = 0  # Use the appropriate namespace index for your server
desired_i = 85

# Object name you are looking for
desired_object_name = "Simulation"

# Function to collect telemetry data from OPC UA server
def collect_telemetry(client):
    client.connect()
    print("Connected!")

    try:
        while True:
            # Collect telemetry data for the desired object
            telemetry_data = {}

            # Browse the server's address space
            root_node = client.get_root_node()
            objects_node = root_node.get_child(["0:Objects"])

            # Find the object with i=85
            target_object = find_object_by_id(objects_node, desired_ns, desired_i)

            if target_object:
                # Browse and collect nodes under the Simulation object
                browse_and_collect(target_object, telemetry_data)

                # Print telemetry data to the console
                send_to_iothub(telemetry_data)

            time.sleep(telemetry_interval)

    except KeyboardInterrupt:
        print("Telemetry collection stopped.")
    finally:
        client.disconnect()
        print("Disconnected!")

def find_object_by_id(node, target_ns, target_i):
    try:
        for child_node in node.get_children():
            if (
                child_node.nodeid.NamespaceIndex == target_ns
                and child_node.nodeid.Identifier == target_i
            ):
                return child_node
            found_object = find_object_by_id(child_node, target_ns, target_i)
            if found_object:
                return found_object
    except Exception as e:
        print(f"Error finding object: {str(e)}")

def browse_and_collect(node, telemetry_data):
    try:
        for child_node in node.get_children():
            try:
                # Read the value of the current node
                value = child_node.get_value()
                telemetry_data[child_node.nodeid.to_string()] = value
            except Exception as e:
                print(f"Error reading node {child_node.nodeid.to_string()}: {str(e)}")

            # Recursively browse child nodes
            browse_and_collect(child_node, telemetry_data)

    except Exception as e:
        print(f"Error browsing node {node.nodeid.to_string()}: {str(e)}")

# Azure IoT Hub connection settings
CONNECTION_STRING = "HostName=vanderlende-hub-dev-001.azure-devices.net;DeviceId=edgedevice001;SharedAccessKey=FSN1nETL1Ev16oetrlMAFUNIR68WN5n1q8G98ziCnz4="

def send_to_iothub(telemetry_data):
    try:
        module_client = IoTHubModuleClient.create_from_connection_string(CONNECTION_STRING)
        module_client.connect()
        print("Connected to Azure IoT Hub")

        twin = {"properties": telemetry_data}
        module_client.patch_twin_reported_properties(twin)
        print("Message sent to IoT Hub", twin)

        module_client.disconnect()
        print("Disconnected from Azure IoT Hub")
    except Exception as e:
        print("Error sending data to IoT Hub:", str(e))

if __name__ == "__main__":
    # Create OPC UA client
    client = Client(endpoint_url)

    try:
        # Start telemetry data collection
        collect_telemetry(client)
    except KeyboardInterrupt:
        print("Telemetry collection stopped.")
