import time
from opcua import Client, ua
from azure.iot.device import IoTHubModuleClient

# OPC UA connection settings
endpoint_url = "opc.tcp://MYTSL02946.lnties.com:53530/OPCUA/SimulationServer"

# Telemetry collection interval in seconds
telemetry_interval = 1

# Function to collect telemetry data from OPC UA server
def collect_telemetry(client):
    client.connect()
    print("Connected!")

    try:
        while True:
            # Collect telemetry data for each node dynamically
            telemetry_data = {}

            # Browse the server's address space
            root_node = client.get_root_node()
            objects_node = root_node.get_child(["0:Objects"])

            # Recursively discover nodes and their values
            browse_and_collect(objects_node, telemetry_data)

            # Print telemetry data to the console
            send_to_iothub(telemetry_data)
            time.sleep(telemetry_interval)

    except KeyboardInterrupt:
        print("Telemetry collection stopped.")
    finally:
        client.disconnect()
        print("Disconnected!")

def browse_and_collect(node, telemetry_data):
    try:
        # Browse all children of the current node
        for child_node in node.get_children():
            # Get the NodeId of the current node
            node_id = child_node.nodeid

            # Read the value of the current node
            value = child_node.get_value()
            telemetry_data[str(node_id)] = value

            # Recursively browse child nodes
            browse_and_collect(child_node, telemetry_data)

    except Exception as e:
        print(f"Error reading node: {str(e)}")

def send_to_iothub(telemetry_data):
    # Azure IoT Hub connection settings
    CONNECTION_STRING = "HostName=vanderlende-hub-dev-001.azure-devices.net;DeviceId=edgedevice001;SharedAccessKey=FSN1nETL1Ev16oetrlMAFUNIR68WN5n1q8G98ziCnz4="

    try:
        module_client = IoTHubModuleClient.create_from_connection_string(CONNECTION_STRING)
        module_client.connect()
        print("Connected to Azure IoT Hub")

        twin = {"properties": telemetry_data}
        module_client.patch_twin_reported_properties(twin)
        print("Message sent to IoT Hub", twin)

        module_client.disconnect()
        print("Disconnected from Azure IoT Hub")
    except Exception as e:
        print("Error sending data to IoT Hub:", str(e))

if __name__ == "__main__":
    # Create OPC UA client
    client = Client(endpoint_url)

    try:
        # Start telemetry data collection
        collect_telemetry(client)
    except KeyboardInterrupt:
        print("Telemetry collection stopped.")
