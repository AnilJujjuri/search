import time
from opcua import Client, ua
from azure.iot.device import IoTHubModuleClient

# OPC UA connection settings
endpoint_url = "opc.tcp://MYTSL02946.lnties.com:53530/OPCUA/SimulationServer"

# Telemetry collection interval in seconds
telemetry_interval = 1

# Specify the BrowseName of the object you want to fetch data from
target_object_name = "MyTargetObject"

# Function to collect telemetry data from OPC UA server
def collect_telemetry(client):
    client.connect()
    print("Connected!")

    try:
        while True:
            # Collect telemetry data for the specified object
            telemetry_data = {}

            # Browse the server's address space to find the target object
            root_node = client.get_root_node()
            objects_node = root_node.get_child(["0:Objects"])
            target_object = find_object_by_browse_name(objects_node, target_object_name)

            if target_object:
                # Recursively discover nodes and their values under the target object
                browse_and_collect(target_object, telemetry_data)

                # Print telemetry data to the console
                send_to_iothub(telemetry_data)

            time.sleep(telemetry_interval)

    except KeyboardInterrupt:
        print("Telemetry collection stopped.")
    finally:
        client.disconnect()
        print("Disconnected!")

def find_object_by_browse_name(node, browse_name):
    try:
        # Browse all children of the current node
        for child_node in node.get_children():
            # Check if the current child node's BrowseName matches the target name
            if child_node.get_browse_name().Name == browse_name:
                return child_node
            else:
                # Recursively search for the target object under this child node
                target_object = find_object_by_browse_name(child_node, browse_name)
                if target_object:
                    return target_object

    except Exception as e:
        print(f"Error searching for object: {str(e)}")

def browse_and_collect(node, telemetry_data):
    try:
        # Browse all children of the current node
        for child_node in node.get_children():
            try:
                # Read the value of the current node
                value = child_node.get_value()
                telemetry_data[child_node.nodeid.to_string()] = value
            except Exception as e:
                print(f"Error reading node {child_node.nodeid.to_string()}: {str(e)}")

            # Recursively browse child nodes
            browse_and_collect(child_node, telemetry_data)

    except Exception as e:
        print(f"Error browsing node {node.nodeid.to_string()}: {str(e)}")

def send_to_iothub(telemetry_data):
    # Azure IoT Hub connection settings
    CONNECTION_STRING = "HostName=vanderlende-hub-dev-001.azure-devices.net;DeviceId=edgedevice001;SharedAccessKey=FSN1nETL1Ev16oetrlMAFUNIR68WN5n1q8G98ziCnz4="

    try:
        module_client = IoTHubModuleClient.create_from_connection_string(CONNECTION_STRING)
        module_client.connect()
        print("Connected to Azure IoT Hub")

        twin = {"properties": telemetry_data}
        module_client.patch_twin_reported_properties(twin)
        print("Message sent to IoT Hub", twin)

        module_client.disconnect()
        print("Disconnected from Azure IoT Hub")
    except Exception as e:
        print("Error sending data to IoT Hub:", str(e))

if __name__ == "__main__":
    # Create OPC UA client
    client = Client(endpoint_url)

    try:
        # Start telemetry data collection
        collect_telemetry(client)
    except KeyboardInterrupt:
        print("Telemetry collection stopped.")
